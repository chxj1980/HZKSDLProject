/**
 * @file   sdl_font18.cpp
 * @author Late Lee <latelee@163.com>
 * @date   Sun Oct 07 13:06:30 2012
 * 
 * @brief  18*18点阵(半角：18*9)显示测试
 *         按列取模，每列占3字节，18列，共18*3=54字节
 *         按行取模，每行占3字节，18行，共18*3=54字节
 * 
 * @log   按行取模显示还有问题
 */

#include "font_9x18.h"
#include "sdl_font18.h"
#include "sdl_graphic.h"

// 点阵大小
#define CHARACTER_WIDTH 18
#include "font_size.h"

// ==========================================================================
//  各种取模方式
// ==========================================================================

// 逐行式，高位在前
static void display_lattice_row_high(int x, int y, unsigned char* lattice, int len)
{
    int tmp = 0;
    unsigned char* p = lattice;
    int column = len/HALFWIDTH_SIZE;
    for (int i = 0; i < column; i++)
    {
        for (int j = 0; j < CHARACTER_HALFWIDTH; j++)
        {
            // 3的由来：24/8 = 3
            tmp = (p[j*3+i*HALFWIDTH_SIZE + 2] << 0) | (p[j*3 +i*HALFWIDTH_SIZE + 1] << 8) | 
                (p[j*3 +i*HALFWIDTH_SIZE + 0] << 16);

            for (int k = 0; k < CHARACTER_HEIGHT; k++)
            {
                /* 逐位相与，为1者打印 */
                if(tmp & (0x800000>>k))
                    pixel(x + j + i*CHARACTER_HALFWIDTH, y + k, 0xffffff);
                else
                    pixel(x + j + i*CHARACTER_HALFWIDTH, y + k, 0x000000);
            }
        }
    }

    myrefresh();
}

// 逐行式，低位在前
static void display_lattice_row_low(int x, int y, unsigned char* lattice, int len)
{
    int tmp = 0;
    unsigned char* p = lattice;
    int column = len/HALFWIDTH_SIZE;
    for (int i = 0; i < column; i++)
    {
        for (int j = 0; j < CHARACTER_HALFWIDTH; j++)
        {
            // 3的由来：24/8 = 3
            tmp = (p[j*3+i*HALFWIDTH_SIZE + 0] << 0) | (p[j*3 +i*HALFWIDTH_SIZE + 1] << 8) | 
                (p[j*3 +i*HALFWIDTH_SIZE + 2] << 16);

            for (int k = 0; k < CHARACTER_HEIGHT; k++)
            {
                /* 逐位相与，为1者打印 */
                if(tmp & (0x000001<<k))
                    pixel(x + j + i*CHARACTER_HALFWIDTH, y + k, 0xffffff);
                else
                    pixel(x + j + i*CHARACTER_HALFWIDTH, y + k, 0x000000);
            }
        }
    }

    myrefresh();
}

// 逐列式，高位在前
static void display_lattice_column_high(int x, int y, unsigned char* lattice, int len)
{
    int tmp = 0;
    unsigned char* p = lattice;
    int column = len/HALFWIDTH_SIZE;
    for (int i = 0; i < column; i++)
    {
        for (int j = 0; j < CHARACTER_HALFWIDTH; j++)
        {
            // 3的由来：24/8 = 3
            tmp = (p[j*3+i*HALFWIDTH_SIZE + 2] << 0) | (p[j*3 +i*HALFWIDTH_SIZE + 1] << 8) | 
                (p[j*3 +i*HALFWIDTH_SIZE + 0] << 16);
            for (int k = 0; k < CHARACTER_HEIGHT; k++)
            {
                /* 逐位相与，为1者打印 */
                if(tmp & (0x800000>>k))
                    pixel(x + j + i*CHARACTER_HALFWIDTH, y + k, 0xffffff);
                else
                    pixel(x + j + i*CHARACTER_HALFWIDTH, y + k, 0x000000);
            }
        }
    }

    myrefresh();
}

// 逐列式，低位在前
static void display_lattice_column_low(int x, int y, unsigned char* lattice, int len)
{
    int tmp = 0;
    unsigned char* p = lattice;
    int column = len/HALFWIDTH_SIZE;
    for (int i = 0; i < column; i++)
    {
        for (int j = 0; j < CHARACTER_HALFWIDTH; j++)
        {
            // 3的由来：24/8 = 3
            tmp = (p[j*3+i*HALFWIDTH_SIZE + 0] << 0) | (p[j*3 +i*HALFWIDTH_SIZE + 1] << 8) | 
                (p[j*3 +i*HALFWIDTH_SIZE + 2] << 16);

            for (int k = 0; k < CHARACTER_HEIGHT; k++)
            {
                /* 逐位相与，为1者打印 */
                if(tmp & (0x000001<<k))
                    pixel(x + j + i*CHARACTER_HALFWIDTH, y + k, 0xffffff);
                else
                    pixel(x + j + i*CHARACTER_HALFWIDTH, y + k, 0x000000);
            }
        }
    }

    myrefresh();
}

// ==========================================================================
//  显示ASCII码(将ASCII保存成数组形式)/汉字
//  取模方式：逐列取模，低位在前
// ==========================================================================

// 全角18*18
// 一次打印一列
// 单个汉字
static void __display_font_column_18(int x, int y, unsigned char *mat)
{
    int i, j;
    int tmp = 0;
    unsigned char* p = mat;

    for(i = 0; i < CHARACTER_WIDTH; i++)
    {
        // 得到一列数据
        tmp = (p[i*3 + 0]) | (p[i*3 + 1] << 8) | (p[i*3 + 2] << 16);
        for (j = 0; j < CHARACTER_HEIGHT; j++)
        {
            /* 逐位相与，为1者打印 */
            if(tmp & (0x0000001<<j))
                pixel(x + i, y + j, 0xffffff);
            else
                pixel(x + i, y + j, 0x000000);
        }
    }

    myrefresh();
}

void display_font_column_18(int x, int y, unsigned char *mat, int num)
{
    while(num--)
    {
        __display_font_column_18(x, y, mat);
        mat += FULLWIDTH_SIZE;
        x += CHARACTER_WIDTH;
    }
}

// 半角18*9
// 一次打印一列
// 单个ASCII码
static void __display_ascii_column_18(int x, int y, unsigned char *mat)
{
    int i, j;
    int tmp = 0;
    unsigned char* p = (unsigned char *)mat;

    for(i = 0; i < CHARACTER_WIDTH/2; i++)
    {
        // 得到一列数据
        tmp = ((p[i*3 + 0]) | (p[i*3 + 1] << 8) | (p[i*3 + 2] << 16)) & 0x00ffffff;
        for (j = 0; j < CHARACTER_HEIGHT; j++)
        {
            /* 逐位相与，为1者打印 */
            if(tmp & (0x0000001<<j))
                pixel(x + i, y + j, 0xffffff);
            else
                pixel(x + i, y + j, 0x000000);
        }
    }

    myrefresh();
}

// 多个ASCII码
void display_ascii_column_18(int x, int y, char *ascii)
{
    int offset;
    unsigned char* p = (unsigned char*)ascii;
    unsigned char* p_ascii;
    while (*p != 0)
    {
        offset = (*p - 0x20) * HALFWIDTH_SIZE;
        p_ascii = ascii_fontdata18 + offset;
        __display_ascii_column_18(x, y, p_ascii);
        x += CHARACTER_WIDTH/2;
        p++;
    }
}

// ==========================================================================
//  测试示例
// ==========================================================================

// 逐行，高位在前
static unsigned char p1[] = {
0x00,0x02,0x00,0x23,0xFF,0x00,0x18,0x20,0x00,0x08,0x40,0x00,0x00,0xA1,0x00,0x03,
0x22,0x00,0x78,0x54,0x00,0x08,0x98,0x00,0x0B,0x2C,0x00,0x08,0x4A,0x00,0x08,0x89,
0x00,0x0B,0x08,0x00,0x18,0x50,0x00,0x24,0x20,0x00,0x43,0x00,0x00,0x00,0xFF,0x80,
0x00,0x00,0x00,0x00,0x00,0x00,/*"逐",0*/

0x04,0x02,0x00,0x04,0xFF,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x24,0x01,0x00,0x45,
0xFF,0x80,0x08,0x08,0x00,0x18,0x08,0x00,0x28,0x08,0x00,0x48,0x08,0x00,0x08,0x08,
0x00,0x08,0x08,0x00,0x08,0x08,0x00,0x08,0x08,0x00,0x08,0x28,0x00,0x08,0x10,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"行",1*/

0x00,0x28,0x00,0x00,0x24,0x00,0x00,0x22,0x00,0x7F,0xFF,0x80,0x00,0x20,0x00,0x00,
0x20,0x00,0x00,0x20,0x00,0x3F,0xA0,0x00,0x04,0x20,0x00,0x04,0x20,0x00,0x04,0x10,
0x00,0x04,0x10,0x00,0x07,0xC8,0x80,0x7C,0x04,0x80,0x20,0x02,0x80,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"式",2*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,
0x00,0x18,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"，",3*/

0x00,0x80,0x00,0x00,0x41,0x00,0x7F,0xFF,0x80,0x00,0x00,0x00,0x07,0xF8,0x00,0x04,
0x08,0x00,0x07,0xF8,0x00,0x00,0x00,0x00,0x1F,0xFF,0x00,0x10,0x01,0x00,0x13,0xF1,
0x00,0x12,0x11,0x00,0x12,0x11,0x00,0x13,0xF1,0x00,0x10,0x05,0x00,0x10,0x02,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"高",4*/

0x04,0x40,0x00,0x04,0x20,0x00,0x08,0x20,0x00,0x08,0x01,0x00,0x0B,0xFF,0x80,0x18,
0x00,0x00,0x29,0x04,0x00,0x29,0x04,0x00,0x48,0x84,0x00,0x08,0x88,0x00,0x08,0x88,
0x00,0x08,0x88,0x00,0x08,0x10,0x00,0x08,0x10,0x00,0x0B,0xFF,0x80,0x08,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"位",5*/

0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x81,0x00,0x7F,0xFF,0x80,0x01,0x00,0x00,0x02,
0x20,0x00,0x04,0x20,0x00,0x08,0x22,0x00,0x19,0xFF,0x00,0x28,0x20,0x00,0x48,0x20,
0x00,0x08,0x20,0x00,0x08,0x20,0x00,0x08,0x21,0x00,0x0B,0xFF,0x80,0x08,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"在",6*/

0x04,0x10,0x00,0x02,0x10,0x00,0x02,0x21,0x00,0x7F,0xFF,0x80,0x00,0x00,0x00,0x1F,
0x02,0x00,0x11,0x12,0x00,0x11,0x12,0x00,0x1F,0x12,0x00,0x11,0x12,0x00,0x11,0x12,
0x00,0x1F,0x12,0x00,0x11,0x12,0x00,0x11,0x02,0x00,0x15,0x0A,0x00,0x12,0x04,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"前",7*/
};

// 逐行，低位在前
static unsigned char p2[] = {
0x00,0x40,0x00,0xC4,0xFF,0x00,0x18,0x04,0x00,0x10,0x02,0x00,0x00,0x85,0x00,0xC0,
0x44,0x00,0x1E,0x2A,0x00,0x10,0x19,0x00,0xD0,0x34,0x00,0x10,0x52,0x00,0x10,0x91,
0x00,0xD0,0x10,0x00,0x18,0x0A,0x00,0x24,0x04,0x00,0xC2,0x00,0x00,0x00,0xFF,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,/*"逐",0*/

0x20,0x40,0x00,0x20,0xFF,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x24,0x80,0x00,0xA2,
0xFF,0x01,0x10,0x10,0x00,0x18,0x10,0x00,0x14,0x10,0x00,0x12,0x10,0x00,0x10,0x10,
0x00,0x10,0x10,0x00,0x10,0x10,0x00,0x10,0x10,0x00,0x10,0x14,0x00,0x10,0x08,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"行",1*/

0x00,0x14,0x00,0x00,0x24,0x00,0x00,0x44,0x00,0xFE,0xFF,0x01,0x00,0x04,0x00,0x00,
0x04,0x00,0x00,0x04,0x00,0xFC,0x05,0x00,0x20,0x04,0x00,0x20,0x04,0x00,0x20,0x08,
0x00,0x20,0x08,0x00,0xE0,0x13,0x01,0x3E,0x20,0x01,0x04,0x40,0x01,0x00,0x80,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"式",2*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,
0x00,0x18,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"，",3*/

0x10,0x40,0x00,0x10,0xF0,0x00,0x90,0x0F,0x00,0x88,0x08,0x00,0x88,0x08,0x00,0x8C,
0x08,0x00,0x8A,0x88,0x00,0x88,0xFF,0x01,0x88,0x08,0x00,0x88,0x08,0x00,0x88,0x08,
0x00,0x88,0x10,0x00,0x88,0x14,0x00,0x88,0x23,0x01,0x88,0x44,0x01,0x08,0x88,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,/*"低",4*/

0x20,0x02,0x00,0x20,0x04,0x00,0x10,0x04,0x00,0x10,0x80,0x00,0xD0,0xFF,0x01,0x18,
0x00,0x00,0x94,0x20,0x00,0x94,0x20,0x00,0x12,0x21,0x00,0x10,0x11,0x00,0x10,0x11,
0x00,0x10,0x11,0x00,0x10,0x08,0x00,0x10,0x08,0x00,0xD0,0xFF,0x01,0x10,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"位",5*/

0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x81,0x00,0xFE,0xFF,0x01,0x80,0x00,0x00,0x40,
0x04,0x00,0x20,0x04,0x00,0x10,0x44,0x00,0x98,0xFF,0x00,0x14,0x04,0x00,0x12,0x04,
0x00,0x10,0x04,0x00,0x10,0x04,0x00,0x10,0x84,0x00,0xD0,0xFF,0x01,0x10,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"在",6*/

0x20,0x08,0x00,0x40,0x08,0x00,0x40,0x84,0x00,0xFE,0xFF,0x01,0x00,0x00,0x00,0xF8,
0x40,0x00,0x88,0x48,0x00,0x88,0x48,0x00,0xF8,0x48,0x00,0x88,0x48,0x00,0x88,0x48,
0x00,0xF8,0x48,0x00,0x88,0x48,0x00,0x88,0x40,0x00,0xA8,0x50,0x00,0x48,0x20,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"前",7*/
};

// 逐列，高位在前
static unsigned char p3[] = {
0x00,0x00,0x00,0x08,0x10,0x00,0x86,0x1F,0x00,0x40,0x60,0x00,0x61,0x81,0x00,0x06,
0x02,0x00,0x00,0x0D,0x00,0x1F,0xF1,0x00,0x11,0x02,0x00,0x11,0xC2,0x00,0x11,0x34,
0x00,0xFF,0x08,0x00,0x11,0x14,0x00,0x11,0x62,0x00,0x15,0x82,0x00,0x18,0x03,0x00,
0x00,0x02,0x00,0x00,0x00,0x00,/*"波",0*/

0x00,0x00,0x00,0x08,0x20,0x00,0x08,0x40,0x00,0x88,0x80,0x00,0x49,0xFF,0x00,0x2E,
0x80,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x1F,0xF0,0x00,0x12,0x20,0x00,0x12,0x20,
0x00,0x12,0x20,0x00,0xFF,0xFF,0x00,0x12,0x20,0x00,0x12,0x20,0x00,0x3F,0xF0,0x00,
0x10,0x00,0x00,0x00,0x00,0x00,/*"神",1*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x42,0xFF,0x00,0x44,
0x92,0x00,0x94,0x92,0x00,0x88,0x92,0x00,0x0D,0x92,0x00,0x42,0xFE,0x00,0x4C,0x92,
0x00,0x70,0x92,0x00,0x44,0x92,0x00,0x42,0x92,0x00,0x44,0xFF,0x00,0x78,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"留",2*/

0x00,0x00,0x00,0x04,0x10,0x00,0x24,0x10,0x00,0x24,0x22,0x00,0x24,0x21,0x00,0x3F,
0xFE,0x00,0x44,0x40,0x00,0x44,0x42,0x00,0x44,0x82,0x00,0x04,0x04,0x00,0xFF,0xC8,
0x00,0x04,0x30,0x00,0x04,0x28,0x00,0x44,0x44,0x00,0x35,0x82,0x00,0x04,0x01,0x00,
0x04,0x0F,0x00,0x00,0x00,0x00,/*"我",3*/

0x00,0x00,0x00,0x02,0x08,0x00,0x42,0x10,0x00,0x4A,0x20,0x00,0x4A,0x40,0x00,0x4A,
0xFF,0x00,0x4B,0xA9,0x00,0x4E,0xA9,0x00,0x7A,0xA9,0x00,0x4A,0xA9,0x00,0x4A,0xA9,
0x00,0x8A,0xA9,0x00,0x8A,0xA9,0x00,0x8A,0xFF,0x00,0x8A,0x00,0x00,0x02,0x00,0x00,
0x02,0x00,0x00,0x00,0x00,0x00,/*"看",4*/

0x00,0x00,0x00,0x02,0x02,0x00,0x04,0x8C,0x00,0x0C,0xB2,0x00,0x34,0x81,0x00,0xC7,
0xFE,0x00,0x44,0x80,0x00,0x24,0xA0,0x00,0x14,0x90,0x00,0x08,0x0C,0x00,0x22,0x20,
0x00,0x19,0xA0,0x00,0x00,0x20,0x00,0x00,0x20,0x00,0xFF,0xFF,0x00,0x00,0x40,0x00,
0x00,0x40,0x00,0x00,0x00,0x00,/*"斜",5*/

0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x00,0x40,0x00,0x00,0x44,0x20,0x00,0x5A,
0x10,0x00,0x61,0xE0,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x41,0x04,0x00,0x41,0x04,
0x00,0x41,0x04,0x00,0x41,0x04,0x00,0x41,0x04,0x00,0xFF,0xFE,0x00,0x40,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"阳",6*/
};

// 取模：逐列式，低位在前
static unsigned char p4[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x01,0x00,0x72,0x01,0x00,0x22,0x01,0x00,0x22,
0x41,0x00,0x22,0x81,0x00,0x22,0x41,0x00,0x3F,0x31,0x00,0x02,0x0F,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"引",0*/

0x00,0x00,0x00,0x00,0x80,0x00,0x04,0x80,0x00,0x04,0x40,0x00,0x04,0x20,0x00,0x04,
0x10,0x00,0x04,0x0C,0x00,0x04,0x03,0x00,0xFC,0x00,0x00,0x04,0x00,0x00,0x04,0x20,
0x00,0x04,0x40,0x00,0x04,0x40,0x00,0x04,0x40,0x00,0x04,0x30,0x00,0xFE,0x0F,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,/*"刀",1*/

0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x60,0x00,0xF0,0x1F,0x00,0x90,0x00,0x00,0x90,
0x10,0x00,0x90,0x20,0x00,0x90,0x9F,0x00,0x10,0x80,0x00,0x10,0x40,0x00,0xFF,0x21,
0x00,0x10,0x16,0x00,0x11,0x18,0x00,0x16,0x26,0x00,0xD0,0x41,0x00,0x18,0x80,0x00,
0x10,0xF0,0x00,0x00,0x00,0x00,/*"成",2*/

0x00,0x00,0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x80,
0x00,0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x80,0x00,
0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x80,0x00,0x00,0x80,0x00,0x00,0xC0,0x00,0x00,
0x80,0x00,0x00,0x00,0x00,0x00,/*"一",3*/

0x00,0x00,0x00,0x20,0x84,0x00,0x10,0x84,0x00,0x8C,0x84,0x00,0x87,0x44,0x00,0x8C,
0x44,0x00,0x94,0x24,0x00,0x84,0x14,0x00,0x86,0x0F,0x00,0x94,0x04,0x00,0x48,0x0C,
0x00,0x47,0x14,0x00,0x44,0x24,0x00,0x4C,0x44,0x00,0x14,0x44,0x00,0x06,0xC6,0x00,
0x04,0x44,0x00,0x00,0x00,0x00,/*"笑",4*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x2C,0x00,0x00,0x1C,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"，",5*/

0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x02,0x04,0x00,0x02,0x02,0x00,0x02,
0x01,0x00,0x82,0x00,0x00,0x42,0x00,0x00,0xF2,0xFF,0x00,0x0E,0x00,0x00,0x02,0x00,
0x00,0x22,0x00,0x00,0x42,0x00,0x00,0x82,0x00,0x00,0x02,0x01,0x00,0x03,0x06,0x00,
0x02,0x00,0x00,0x00,0x00,0x00,/*"不",6*/

0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x00,0x20,0x80,0x00,0x10,0x80,0x00,0xE8,
0x4F,0x00,0x24,0x40,0x00,0x27,0x20,0x00,0x24,0x10,0x00,0xA4,0x0F,0x00,0x34,0x10,
0x00,0x2E,0x10,0x00,0x24,0x20,0x00,0xE0,0x2F,0x00,0x00,0x40,0x00,0x00,0xC0,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"负",7*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x00,0x00,0x81,0x00,0xC0,0x80,0x00,0x38,
0x40,0x00,0x00,0x40,0x00,0x00,0x20,0x00,0x00,0x20,0x00,0xFF,0x17,0x00,0x00,0x10,
0x00,0x00,0x08,0x00,0x08,0x04,0x00,0x10,0x03,0x00,0x20,0x00,0x00,0xC0,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,/*"少",8*/

0x00,0x00,0x00,0x00,0x04,0x00,0x10,0x04,0x00,0x08,0x04,0x00,0xC4,0x07,0x00,0x47,
0x04,0x00,0x44,0x04,0x00,0x44,0x04,0x00,0x44,0x04,0x00,0xFC,0xFF,0x00,0x44,0x04,
0x00,0x44,0x04,0x00,0x44,0x04,0x00,0x64,0x04,0x00,0x46,0x04,0x00,0x04,0x06,0x00,
0x00,0x04,0x00,0x00,0x00,0x00,/*"年",9*/

0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x82,0x00,0x20,0x82,0x00,0x42,0x42,0x00,0xC4,
0x42,0x00,0x0C,0x22,0x00,0x00,0x12,0x00,0x00,0x0A,0x00,0xFF,0x07,0x00,0x00,0x0A,
0x00,0x00,0x12,0x00,0x00,0x12,0x00,0x00,0x22,0x00,0x00,0x42,0x00,0x00,0xC3,0x00,
0x00,0x02,0x00,0x00,0x00,0x00,/*"头",10*/
};

void font_18_test(void)
{
    display_lattice_row_high(0, 5, p1, sizeof(p1));
    display_lattice_row_low(0, 30, p2, sizeof(p2));
    display_lattice_column_high(0, 60, p3, sizeof(p3));
    display_lattice_column_low(0, 90, p4, sizeof(p4));

    display_ascii_column_18(0, 120, "hello world! Goodbye!");
    display_font_column_18(0, 150, p4, sizeof(p4)/FULLWIDTH_SIZE);
}
